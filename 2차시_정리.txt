1. Issue 할당
   -. issue 만들어보기
      > 로그인한 후 내 repo 페이지에 접속해서  issue 탭을 눌러주세요.
   -. issue 만들기
      > 초록색 버튼 New issue 를 누르면 생성이 됩니다.
      > 제목과 상세 내용은 협업하는 사람도 잘 알아볼 수있도록 적어주는게 좋겠죠!
      > Assigness(담당자) : 이 이슈를 작업하거나 연관된 사람을 적어줍니다. 내가 요리법 업데이트 할 꺼니까 나를 선택해주세요.
      > Labels: 이 issue 가 어떤 건지 분류해주는 겁니다. Github이 만들어준 기본 라벨을 사용할 수도 있고, 
         내가 직접 만들어줄 수도 있어요. 여기서는 enhancement (추가 기능 개선) , good first issue 
         (처음 프로젝트에 참여하는 사람이 작업하기 쉬운 이슈) 를 골라주었어요. 마음에 드는 걸 골라주셔도 됩니다!    
      > 제목 옆에 있는 #숫자 가 보이나요? 이게 바로 이슈의 번호 입니다. 
      > 밑에 Leave a comment 라고 적힌 창이 생겼죠? 이슈에 대한 댓글이에요. 
   -. issue 를 완료하기
      > issue  페이지 하단에  Close issue  를  누르면 이슈가 종료됩니다.     

2. Branch 개념
   -.  브랜치(Branch)를 사용하게 되면 나뭇가지가 뻗어나오듯 기능에 맞게 나누어 작업할 수 있습니다.
   -.  issue와 브랜치 만들기
       > 만약 커밋되지 않은 작업 내역이 있다면 commit 을 해주세요! 
       > 왼쪽 히스토리 탭을 선택하고 - 마지막 commit 에서 우클릭 한 후 브랜치 를 선택해주세요.   
       > 새 브랜치 : 브랜치 이름을 적어주세요. 내가 잘 관리할 수 있게 적어주세요. 
                        여기서는 feature/이슈번호_관리쉬운이름 형식으로 만들어줍시다.   
       > 정보를 입력한 후 '브랜치 생성' 버튼을 누릅니다.
       > sourcetree 에서는 브랜치명 안에  / 를 적어주면 마치 폴더처럼 보여줍니다. 
       > 앞으로 하는 commit 은 방금 만든 브랜치인 feature/2_jjigae 에만 반영됩니다. 
          현재 작업하는 브랜치를 선택하는 것을 체크아웃(checkout) 이라고 합니다. 
   -. 브랜치 삭제하기
      > 브랜치를 삭제한다는 것은 그동안 브랜치에 했던 작업 내역 즉, commit 이 모두가 사라진다는 의미입니다. 
      >  작업 브랜치가 변경되면 파일의 상태도 당연히 해당 브랜치의 마지막 commit 으로 상태로 변경됩니다. 

3. Merge 개념
   -. Merge(병합) 는 브랜치를 다른 브랜치에 합치는 것입니다. 
   -. 실제 프로젝트에서는 작업 내역을 모두 합칠 기준이 되는 브랜치(main)를 정해두고 작업합니다.
   -. 브랜치명은 규칙을 가지고 잘 이름 지으면 프로젝트 관리가 쉬워집니다. 
      작업이 완료되면 작업한 브랜치는 보통 삭제해줍니다. 나중에 브랜치 설정이 꼬이는 것을 방지할 수 있습니다. 

4. Merge conflict 개념
   -. Merge 하는 과정에서 같은 파일이 동일한 부분이 수정된 게 발견되면 Merge conflict(병합 충돌) 이 발생합니다.
   -. Git 이 똑똑하게 충돌을 파악할 수 있도록 파일 내용을 고쳐서 충돌 내역을 보여줍니다. 
   -. conflict 를 수정하려면 최종적으로 반영할 내역으로 고친 후에 merge commit 하면 됩니다. 
   -. 브랜치 두개를 만들고 각각 브랜치에서 같은 파일을 수정하고 commit 해보세요. 
      main 브랜치에  merge 하려고 하면 conflict 가 발생합니다! 파일을 직접 수정해서 conflict 를 수정하고 commit 해보세요.

5. 원격 repo 개념
    -. tracking 한다는 것은 로컬 repo와 원격 repo의 특정 브랜치를 연결해주는 것입니다. 
    -. push와 pull 은 기본적으로 tracking(추적)되고 있는 브랜치를 기준으로 commit 내역을 반영합니다. 
    -. 
